(defstruct movie
  title  director year type)

(defparameter *size* 3)
(defvar *d* 0)

(defvar *db* (make-array *size*  :initial-element nil))
(defvar *vec* (make-array *size* :initial-element nil))
(defvar *vec2* (make-array *size* :initial-element nil))

(defvar *list* nil)

(defvar *db-list* nil)  

(defun size ()
  (setf *d* 0)
  (dotimes (i *size*)
    (if (equal (aref *db* i) nil)
        ()
        (setf *d* (+ *d* 1))
        )
    )
  )

(defun quicksort (vec comp)
  (when (> (length vec) 1)
    (let ((pivot-i 0)
          (pivot (aref vec (1- (length vec)))))
      (dotimes (i (1- (length vec)))
        (when (funcall comp (aref vec i) pivot)
          (rotatef (aref vec i)
                   (aref vec pivot-i))
          (incf pivot-i)))
      (rotatef (aref vec (1- (length vec)))
               (aref vec pivot-i))
      (quicksort (rtl:slice vec 0 pivot-i) comp)
      (quicksort (rtl:slice vec (1+ pivot-i)) comp)))
  vec)

(defun sr (m case_s)
  (setf *vec2* (make-array *size* :initial-element nil))
  (dotimes (i *d*)
    (block nested
      (dotimes (j *size*)
        (if (equal(aref *db* j) nil)
            ()
            (progn
              (if (equal case_s "title")
                  (progn
                    (if (equal (movie-title(aref *db* j)) (aref m i))
                        (progn
                          (setf (aref *vec2* i) (aref *db* j))
                          (setf (aref *db* j) nil)
                          (return-from nested)
                          )
                        )
                    )
                  (progn
                    (if (equal (movie-year(aref *db* j)) (aref m i))
                        (progn
                          (setf (aref *vec2* i) (aref *db* j))
                          (setf (aref *db* j) nil)
                          (return-from nested)
                          )
                        )
                    )
                  )
              )
            )
        )
      )
    )
  (setf *db* *vec2*)
  )

(defun sort-title () 
  (size)
  (setf *vec* (make-array *d* :initial-element nil))
  (if (typep (aref *db* 0) 'movie)
      (progn
        (dotimes (i *size*)
          (if (equal (aref *db* i) nil)
              ()
              (setf (aref *vec* i) (movie-title(aref *db* i)))
              )
          )
        (quicksort *vec* 'string<=)
        (sr *vec* "title")
        (return-from sort-title *db*)
        )
      )
  )


(defun sort-year () 
  (size)
  (setf *vec* (make-array *d* :initial-element nil))
  (if (typep (aref *db* 0) 'movie)
      (progn
        (dotimes (i *size*)
          (if (equal (aref *db* i) nil)
              ()
              (setf (aref *vec* i) (movie-year(aref *db* i)))
              )
          )
        (quicksort *vec* '<)
        (sr *vec* "x")
        (return-from sort-year *db*)
        )
      )
  )

(defun in-db-list? (m)
  (dotimes (i (length *db-list*))
    (when (and (typep (nth i *db-list*) 'movie) (equal (movie-title (nth i *db-list*)) m))
      (return *db-list*)
      )
    )
  )

(defun add-movie (m)
  "Adds a movie to the DB and returns true"
  (dotimes (i *size*)
    (when (null (aref *db* i))
      (setf (aref *db* i) m)
      (return *db*))))

(defun from-year (year)
  (setf *list* nil)
  (dotimes (i (length *db-list*))
    (if (equal (movie-year(nth i *db-list*)) year)
        (push (nth i *db-list*) *list*)
        ;(setf *list* (append *list* (list (nth i *db-list*))))
        )
    )
  (if (> (length *list*) 0)
      (return-from from-year *list*)
      )
  )

(defun add-movie-list (m)
  "Adds a movie to the end of *db-list* and returns the list"
  (if (equal(in-db-list? (movie-title m)) nil)
      (push m *db-list*)
      (return-from add-movie-list nil)
      )
  )
